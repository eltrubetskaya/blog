<?php

namespace Veta\HomeworkBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    /**
     * @param int $limit
     * @return QueryBuilder
     */
    public function findMostRecentQueryBuilder($limit = 100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.enabled = '1'")
            ->orderBy('u.dateCreate', 'DESC')
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param int $limit
     * @return Query
     */
    public function findMostRecentQuery($limit = 100)
    {
        return $this->findMostRecentQueryBuilder($limit)->getQuery();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findMostRecent($limit = 100)
    {
        return $this->findMostRecentQuery($limit)->getResult();
    }

    /**
     * @param int $limit
     * @return QueryBuilder
     */
    public function findMostOldQueryBuilder($limit = 100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.enabled = '1'")
            ->orderBy('u.dateCreate', 'ASC')
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param int $limit
     * @return Query
     */
    public function findMostOldQuery($limit = 100)
    {
        return $this->findMostOldQueryBuilder($limit)->getQuery();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findMostOldRecent($limit = 100)
    {
        return $this->findMostOldQuery($limit)->getResult();
    }

    /**
     * @param int $limit
     * @return QueryBuilder
     */
    public function findOrderByTitleUpQueryBuilder($limit = 100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.enabled = '1'")
            ->orderBy('u.title', 'DESC')
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param int $limit
     * @return Query
     */
    public function findOrderByTitleUpQuery($limit = 100)
    {
        return $this->findOrderByTitleUpQueryBuilder($limit)->getQuery();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findOrderByTitleUp($limit = 100)
    {
        return $this->findOrderByTitleUpQuery($limit)->getResult();
    }

    /**
     * @param int $limit
     * @return QueryBuilder
     */
    public function findOrderByTitleDownQueryBuilder($limit = 100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.enabled = '1'")
            ->orderBy('u.title', 'ASC')
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param int $limit
     * @return Query
     */
    public function findOrderByTitleDownQuery($limit = 100)
    {
        return $this->findOrderByTitleDownQueryBuilder($limit)->getQuery();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findOrderByTitleDown($limit = 100)
    {
        return $this->findOrderByTitleDownQuery($limit)->getResult();
    }

    /**
     * @param $q
     * @param $search
     * @param int $limit
     * @return QueryBuilder
     */
    public function findQQueryBuilder($q, $search, $limit=100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.enabled = '1'")
            ->andWhere("u.title like '%$q%' or u.text like '%$q%'  or u.description like '%$q%'")
        ;
        foreach ($search as $word) {
            $qb
                ->orWhere("u.title like '%$word%' or u.text like '%$word%'  or u.description like '%$word%'")
                ;
        }

        $qb
            ->orderBy('u.dateCreate', 'DESC')
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param $q
     * @param $search
     * @param int $limit
     * @return Query
     */
    public function findQQuery($q, $search, $limit=100)
    {
        return $this->findQQueryBuilder($q, $search, $limit)->getQuery();
    }

    /**
     * @param $q
     * @param $search
     * @param int $limit
     * @return array
     */
    public function findQ($q, $search, $limit=100)
    {
        return $this->findQQuery($q, $search, $limit)->getResult();
    }

    /**
     * @param int $limit
     * @return QueryBuilder
     */
    public function findMostLikesQueryBuilder($limit = 100)
    {
        $qb = $this->createQueryBuilder('u')
            ->where("u.dateCreate > :date")
            ->orderBy('u.likes', 'DESC')
            ->setParameter('date', new \DateTime('-1 day'))
            ->setMaxResults($limit)

        ;

        return $qb;
    }

    /**
     * @param int $limit
     * @return Query
     */
    public function findMostLikesQuery($limit = 100)
    {
        return $this->findMostLikesQueryBuilder($limit)->getQuery();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function findMostLikes($limit = 100)
    {
        return $this->findMostLikesQuery($limit)->getResult();
    }
}
